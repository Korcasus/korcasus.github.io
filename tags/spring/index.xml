<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Spring on Read Write</title>
        <link>https://korcasus.github.io/tags/spring/</link>
        <description>Recent content in Spring on Read Write</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ko</language>
        <lastBuildDate>Mon, 20 Feb 2023 23:16:51 +0900</lastBuildDate><atom:link href="https://korcasus.github.io/tags/spring/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Spring Fat-jar for Spark</title>
        <link>https://korcasus.github.io/p/spring-fat-jar-for-spark/</link>
        <pubDate>Mon, 20 Feb 2023 23:16:51 +0900</pubDate>
        
        <guid>https://korcasus.github.io/p/spring-fat-jar-for-spark/</guid>
        <description>&lt;h2 id=&#34;how-to-build-fat-jar&#34;&gt;How to Build Fat Jar&lt;/h2&gt;
&lt;p&gt;Build Tool을 어떤 종류를 사용하는지에 따라 방법이 달라집니다.&lt;br&gt;
Maven은 &lt;code&gt;maven-assembly-plugin&lt;/code&gt;&lt;br&gt;
Gradle &lt;code&gt;Shadow Plugin&lt;/code&gt; 을 사용해야합니다.&lt;br&gt;
대부분은 위의 2개 Plugin중 하나만 사용하면 해결되지만, Spring Boot는 구동방식이 달라서, 별도의 처리가 필요합니다.&lt;/p&gt;
&lt;h2 id=&#34;boot-jar&#34;&gt;Boot-Jar&lt;/h2&gt;
&lt;p&gt;Spring에서 공식적으로 권장하는 방법입니다.&lt;/p&gt;
&lt;p&gt;설명에 따르면 Java는 nested-jar파일을 load하는 방법을 제공하지않습니다. 이때문에 압축 풀지않고, 실행해야하는 환경이라면 문제가 될 수 있습니다.&lt;br&gt;
이 때문에 Shaded Jar(Fat Jar)를 사용해야합니다. 모든 Jars파일로부터 모든 Class를 모아서 Pacakage하여 하나의 Jar파일로 만들어 줍니다.&lt;br&gt;
실제로 Application에 존재하는 library를 보기에 힘들어지기때문에, Spring은 다른 방법을 제공합니다.&lt;/p&gt;
&lt;p&gt;어떤방식으로 구현되었는지가 궁금하다면 상세한 내용은 공식문서를 참고해주세요.&lt;/p&gt;
&lt;h3 id=&#34;configuration&#34;&gt;Configuration&lt;/h3&gt;
&lt;h4 id=&#34;1-module-추가&#34;&gt;1. Module 추가&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;implementation &#39;org.springframework.boot:spring-boot-loader&#39;&lt;/code&gt;&lt;br&gt;
위의 모듈은 Spring boot 를 Excutable Jar 또는 War로 만들수 있게 도와줍니다.&lt;/p&gt;
&lt;h4 id=&#34;2-manifest-변경&#34;&gt;2. Manifest 변경&lt;/h4&gt;
&lt;p&gt;JarLauncher를 통해 실행되어야하기 때문에, Manifest 변경이 필요합니다.&lt;br&gt;
&lt;code&gt;META-INF/MANIFEST.MF&lt;/code&gt; 에 내용이 존재하는데. Build하며 기록되어야 합니다.&lt;/p&gt;
&lt;p&gt;공식문서에는 아래와같이 가이드 하고 있습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Main&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;Class:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;org&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;springframework&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;boot&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;loader&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;JarLauncher&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Start&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;Class:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;com&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;mycompany&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;project&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;MyApplication&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;저의 경우에는 아래와 같이 적용하였습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;jar&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;manifest&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;attributes&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Main-Class&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;org.springframework.boot.loader.JarLauncher&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;attributes&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Start-Class&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;com.mycompany.team.batch.SparkSpringBatchClient&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;문제점&#34;&gt;문제점&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;java -jar xxx.jar&lt;/code&gt; 명령어로 실행할 경우, 정상동작합니다.&lt;br&gt;
하지만 Spark에서 실행할 경우, 문제가 발생합니다.&lt;/p&gt;
&lt;p&gt;이유는 Dependency version 때문이었습니다.&lt;br&gt;
재직중인 회사에서 운영중인 Spark는 2.4버전을 사용 중인데, 여기에 포함되어있는 gson 버전이 Application에서 사용해야할 버전보다 낮았습니다.
이때문에 구버전의 Gson으로 사용되면서 Application구동 실패 하였습니다.&lt;/p&gt;
&lt;p&gt;강제로 최신버전의 Gson을 사용할 수 있는 방안을 찾아보았습니다.&lt;br&gt;
첫번째로는 사용할 Dependency버전을 명시하는 방법이였습니다.&lt;br&gt;
(참고로 이 방법을 사용하지않아도 비교적 최신 gson을 사용합니다.)
하지만 spark에 내장되어있는 library를 우선으로 사용하기때문에 실패하였습니다.&lt;/p&gt;
&lt;p&gt;두번째 방법은 &lt;a class=&#34;link&#34; href=&#34;https://spark.apache.org/docs/latest/configuration.html#runtime-environment&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Spark공식문서&lt;/a&gt;에서 제공하는 방법입니다. (&lt;a class=&#34;link&#34; href=&#34;https://stackoverflow.com/questions/31150656/classpath-resolution-between-spark-uber-jar-and-spark-submit-jars-when-similar&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;참고&lt;/a&gt;)&lt;br&gt;
&lt;code&gt;spark.driver.userClassPathFirst&lt;/code&gt;&lt;br&gt;
&lt;code&gt;spark.executor.userClassPathFirst&lt;/code&gt;&lt;br&gt;
위의 2개 변수는 기본값이 False로 되어있습니다.&lt;/p&gt;
&lt;p&gt;문서에 따르면, 사용자가 옵션으로 추가한 &lt;code&gt;--jars&lt;/code&gt; 를 우선시 사용한다고 되어있습니다.&lt;br&gt;
시험 기능인 문제도 있고, 추가해야할 jar이 증가하면 관리할 포인트가 증가할 수 있습니다.
의도한대로 동작하지도 않았고, 의도했던 바가 아니라 더이상 사용하지 않았습니다.&lt;/p&gt;
&lt;p&gt;이를 해결하려면 relocate(임의로 이름변경?)을 사용해야하는데, Shadow Plugin에서는 지원합니다.&lt;/p&gt;
&lt;h2 id=&#34;shadow-plugin&#34;&gt;Shadow Plugin&lt;/h2&gt;
&lt;p&gt;프로젝트 내에 있는 Dependency Classs와 Resource를 하나의 Jar로 만들어 줍니다.&lt;br&gt;
이로 인해 얻을수 있는 장점은 2가지입니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;실행가능한 Jar배포를 만든다.&lt;/li&gt;
&lt;li&gt;Library에 있는 공통 Dependency를 bundling, relocating하여 classpath conflict를 회피한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://wonyong-jang.github.io/spark/2021/07/08/Spark-override-dependency.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;장점을 좀더 잘 풀어쓴글&lt;/a&gt;을 참고하면 좋겠습니다.&lt;/p&gt;
&lt;h3 id=&#34;add-option-for-spring&#34;&gt;Add Option For Spring&lt;/h3&gt;
&lt;p&gt;Shadow Plugin으로 Spring Application을 Build하려면 추가 옵션이 필요합니다.&lt;/p&gt;
&lt;p&gt;아래의 내용을 추가합니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;com.github.jengelman.gradle.plugins.shadow.transformers.*&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;shadowJar&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// Required for Spring
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;mergeServiceFiles&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;append&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;META-INF/spring.handlers&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;append&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;META-INF/spring.schemas&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;append&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;META-INF/spring.tooling&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;transform&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PropertiesFileTransformer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;paths&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;META-INF/spring.factories&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;mergeStrategy&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;append&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;상세한 내용은 &lt;a class=&#34;link&#34; href=&#34;https://github.com/spring-projects/spring-boot/issues/1828#issuecomment-231104288&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Git Issue&lt;/a&gt;를 읽어보면 알 수 있습니다.&lt;/p&gt;
&lt;h3 id=&#34;relocating-packages&#34;&gt;Relocating Packages&lt;/h3&gt;
&lt;p&gt;Classpath에 동일한 Dependency가 존재하여, 의도하고자한 버전을 사용하지 못하는 상황일때 사용하는 기능입니다. Hadoop, Spark에서 빈번히 발생합니다.&lt;/p&gt;
&lt;p&gt;이 아이디어는 간단합니다. 충돌나는 Dependency를 Project에서 찾아낸뒤, 이름(경로)을 바꿔줍니다.
다른 이름의 Dependency를 사용하기때문에 문제가 생기지 않습니다.&lt;/p&gt;
&lt;p&gt;구현방법은 간단합니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Relocating a Package
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shadowJar&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;n&#34;&gt;relocate&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;junit.framework&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;shadow.junit&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;juni.framework&lt;/code&gt;를  &lt;code&gt;shadow.junit&lt;/code&gt; 으로 변경해 줍니다.&lt;br&gt;
필요에 맞게 아래처럼 적용합니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;relocate&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;com.google.gson&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;shadow.google.gson&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;relocate&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;com.fasterxml.jackson&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;shadow.fasterxml.jackson&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Shadow Plugin에서 relocation을 살펴보고싶다면 &lt;a class=&#34;link&#34; href=&#34;https://imperceptiblethoughts.com/shadow/configuration/relocation/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;링크&lt;/a&gt;를 참고해주세요.&lt;/p&gt;
&lt;h3 id=&#34;classpath-변경&#34;&gt;Classpath 변경&lt;/h3&gt;
&lt;p&gt;사실 여기까지 진행하고 나서, 잘 실행하는것을 기대했습니다.&lt;br&gt;
하지만 &lt;code&gt;java -jar project-all.jar&lt;/code&gt; 로 실행해보면, 이상함을 느낄 수 있습니다. &lt;br&gt;
&lt;img src=&#34;https://korcasus.github.io/p/spring-fat-jar-for-spark/capture.jpg&#34;
	width=&#34;2556&#34;
	height=&#34;1130&#34;
	srcset=&#34;https://korcasus.github.io/p/spring-fat-jar-for-spark/capture_hu6b272fe632b935ee9dc6b0754ccf08d6_754278_480x0_resize_q75_box.jpg 480w, https://korcasus.github.io/p/spring-fat-jar-for-spark/capture_hu6b272fe632b935ee9dc6b0754ccf08d6_754278_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;캡처&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;226&#34;
		data-flex-basis=&#34;542px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Spring자체는 실행되었지만, Main Application이 실행되지 않은 것을 확인 할 수 있습니다.&lt;br&gt;
찾아보니, 원인을 알기 쉽지 않았습니다.&lt;/p&gt;
&lt;p&gt;다행히 try and error 거치며 알아냈는데, 아래의 링크와 관련있었습니다.
&lt;a class=&#34;link&#34; href=&#34;https://imperceptiblethoughts.com/shadow/configuration/dependencies/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://imperceptiblethoughts.com/shadow/configuration/dependencies/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;기본으로 runtimeClassPath만 포함되서 Build되었고, 아래처럼 compileClassPath를 포함하니 해결되었습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;configurations&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;project&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;configurations&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;compileClasspath&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;project&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;configurations&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;productionRuntimeClasspath&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;문제해결이 우선이라, 왜 compileClassPath도 포함해야만 정상동작하는지는 확인해보지 않았습니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Spring을 사용할때, 어떻게 Fat Jar(Shaded Jar)을 빌드할 수 있는지 살펴보았습니다.&lt;br&gt;
Boot-Jar은 스프링에서 권장하는 방법이고 간단하다는 장점이 있지만, Dependency 충돌하는 상황이라면 해결할기 어렵다는 문제가 있습니다.&lt;br&gt;
이런경우는 하둡 클러스터를 사용하는경우에 해당됩니다.&lt;/p&gt;
&lt;p&gt;Shadow Plugin을 사용하는 방법은 일반적으로 많이 사용하는 방법입니다.&lt;br&gt;
하지만 스프링에 적용하려면 스크립트를 추가로 작성해주어야 하지만, Boot-Jar에서 겪었던 문제를 회피할 수 있습니다.&lt;/p&gt;
&lt;p&gt;Spark나 하둡 클러스터를 사용해야하는 경우라면 Shadow Plugin을 사용하는 것을 권장합니다.&lt;br&gt;
하지만 이와 같은 문제를 부딪힌 상황이 아니라면, 본인의 상황에 맞게 사용하는 것을 권장합니다.&lt;/p&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Spring Official Guide : &lt;a class=&#34;link&#34; href=&#34;https://docs.spring.io/spring-boot/docs/current/reference/html/executable-jar.html#appendix.executable-jar.alternatives&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://docs.spring.io/spring-boot/docs/current/reference/html/executable-jar.html#appendix.executable-jar.alternatives&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;공식문서 번역 Article : &lt;a class=&#34;link&#34; href=&#34;https://wordbe.tistory.com/entry/Spring-Boot-2-Executable-JAR-%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B6%80%ED%8A%B8-%EC%8B%A4%ED%96%89&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://wordbe.tistory.com/entry/Spring-Boot-2-Executable-JAR-스프링-부트-실행&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Spring fat jar Git Issue for shadow plugin : &lt;a class=&#34;link&#34; href=&#34;https://github.com/spring-projects/spring-boot/issues/1828#issuecomment-231104288&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/spring-projects/spring-boot/issues/1828#issuecomment-231104288&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;전반적인 이해에 도움을 주었던 StackOverflow : &lt;a class=&#34;link&#34; href=&#34;https://stackoverflow.com/questions/51206959/classnotfound-when-submit-a-spring-boot-fat-jar-to-spark&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://stackoverflow.com/questions/51206959/classnotfound-when-submit-a-spring-boot-fat-jar-to-spark&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
